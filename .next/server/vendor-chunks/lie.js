"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lie";
exports.ids = ["vendor-chunks/lie"];
exports.modules = {

/***/ "(rsc)/./node_modules/lie/lib/index.js":
/*!***************************************!*\
  !*** ./node_modules/lie/lib/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar immediate = __webpack_require__(/*! immediate */ \"(rsc)/./node_modules/immediate/lib/index.js\");\n/* istanbul ignore next */ function INTERNAL() {}\nvar handlers = {};\nvar REJECTED = [\n    \"REJECTED\"\n];\nvar FULFILLED = [\n    \"FULFILLED\"\n];\nvar PENDING = [\n    \"PENDING\"\n];\n/* istanbul ignore else */ if (true) {\n    // in which we actually take advantage of JS scoping\n    var UNHANDLED = [\n        \"UNHANDLED\"\n    ];\n}\nmodule.exports = Promise;\nfunction Promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function\");\n    }\n    this.state = PENDING;\n    this.queue = [];\n    this.outcome = void 0;\n    /* istanbul ignore else */ if (true) {\n        this.handled = UNHANDLED;\n    }\n    if (resolver !== INTERNAL) {\n        safelyResolveThenable(this, resolver);\n    }\n}\nPromise.prototype.finally = function(callback) {\n    if (typeof callback !== \"function\") {\n        return this;\n    }\n    var p = this.constructor;\n    return this.then(resolve, reject);\n    function resolve(value) {\n        function yes() {\n            return value;\n        }\n        return p.resolve(callback()).then(yes);\n    }\n    function reject(reason) {\n        function no() {\n            throw reason;\n        }\n        return p.resolve(callback()).then(no);\n    }\n};\nPromise.prototype.catch = function(onRejected) {\n    return this.then(null, onRejected);\n};\nPromise.prototype.then = function(onFulfilled, onRejected) {\n    if (typeof onFulfilled !== \"function\" && this.state === FULFILLED || typeof onRejected !== \"function\" && this.state === REJECTED) {\n        return this;\n    }\n    var promise = new this.constructor(INTERNAL);\n    /* istanbul ignore else */ if (true) {\n        if (this.handled === UNHANDLED) {\n            this.handled = null;\n        }\n    }\n    if (this.state !== PENDING) {\n        var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n        unwrap(promise, resolver, this.outcome);\n    } else {\n        this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n    }\n    return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n    this.promise = promise;\n    if (typeof onFulfilled === \"function\") {\n        this.onFulfilled = onFulfilled;\n        this.callFulfilled = this.otherCallFulfilled;\n    }\n    if (typeof onRejected === \"function\") {\n        this.onRejected = onRejected;\n        this.callRejected = this.otherCallRejected;\n    }\n}\nQueueItem.prototype.callFulfilled = function(value) {\n    handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function(value) {\n    unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function(value) {\n    handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function(value) {\n    unwrap(this.promise, this.onRejected, value);\n};\nfunction unwrap(promise, func, value) {\n    immediate(function() {\n        var returnValue;\n        try {\n            returnValue = func(value);\n        } catch (e) {\n            return handlers.reject(promise, e);\n        }\n        if (returnValue === promise) {\n            handlers.reject(promise, new TypeError(\"Cannot resolve promise with itself\"));\n        } else {\n            handlers.resolve(promise, returnValue);\n        }\n    });\n}\nhandlers.resolve = function(self, value) {\n    var result = tryCatch(getThen, value);\n    if (result.status === \"error\") {\n        return handlers.reject(self, result.value);\n    }\n    var thenable = result.value;\n    if (thenable) {\n        safelyResolveThenable(self, thenable);\n    } else {\n        self.state = FULFILLED;\n        self.outcome = value;\n        var i = -1;\n        var len = self.queue.length;\n        while(++i < len){\n            self.queue[i].callFulfilled(value);\n        }\n    }\n    return self;\n};\nhandlers.reject = function(self, error) {\n    self.state = REJECTED;\n    self.outcome = error;\n    /* istanbul ignore else */ if (true) {\n        if (self.handled === UNHANDLED) {\n            immediate(function() {\n                if (self.handled === UNHANDLED) {\n                    process.emit(\"unhandledRejection\", error, self);\n                }\n            });\n        }\n    }\n    var i = -1;\n    var len = self.queue.length;\n    while(++i < len){\n        self.queue[i].callRejected(error);\n    }\n    return self;\n};\nfunction getThen(obj) {\n    // Make sure we only access the accessor once as required by the spec\n    var then = obj && obj.then;\n    if (obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof then === \"function\") {\n        return function appyThen() {\n            then.apply(obj, arguments);\n        };\n    }\n}\nfunction safelyResolveThenable(self, thenable) {\n    // Either fulfill, reject or reject with error\n    var called = false;\n    function onError(value) {\n        if (called) {\n            return;\n        }\n        called = true;\n        handlers.reject(self, value);\n    }\n    function onSuccess(value) {\n        if (called) {\n            return;\n        }\n        called = true;\n        handlers.resolve(self, value);\n    }\n    function tryToUnwrap() {\n        thenable(onSuccess, onError);\n    }\n    var result = tryCatch(tryToUnwrap);\n    if (result.status === \"error\") {\n        onError(result.value);\n    }\n}\nfunction tryCatch(func, value) {\n    var out = {};\n    try {\n        out.value = func(value);\n        out.status = \"success\";\n    } catch (e) {\n        out.status = \"error\";\n        out.value = e;\n    }\n    return out;\n}\nPromise.resolve = resolve;\nfunction resolve(value) {\n    if (value instanceof this) {\n        return value;\n    }\n    return handlers.resolve(new this(INTERNAL), value);\n}\nPromise.reject = reject;\nfunction reject(reason) {\n    var promise = new this(INTERNAL);\n    return handlers.reject(promise, reason);\n}\nPromise.all = all;\nfunction all(iterable) {\n    var self = this;\n    if (Object.prototype.toString.call(iterable) !== \"[object Array]\") {\n        return this.reject(new TypeError(\"must be an array\"));\n    }\n    var len = iterable.length;\n    var called = false;\n    if (!len) {\n        return this.resolve([]);\n    }\n    var values = new Array(len);\n    var resolved = 0;\n    var i = -1;\n    var promise = new this(INTERNAL);\n    while(++i < len){\n        allResolver(iterable[i], i);\n    }\n    return promise;\n    function allResolver(value, i) {\n        self.resolve(value).then(resolveFromAll, function(error) {\n            if (!called) {\n                called = true;\n                handlers.reject(promise, error);\n            }\n        });\n        function resolveFromAll(outValue) {\n            values[i] = outValue;\n            if (++resolved === len && !called) {\n                called = true;\n                handlers.resolve(promise, values);\n            }\n        }\n    }\n}\nPromise.race = race;\nfunction race(iterable) {\n    var self = this;\n    if (Object.prototype.toString.call(iterable) !== \"[object Array]\") {\n        return this.reject(new TypeError(\"must be an array\"));\n    }\n    var len = iterable.length;\n    var called = false;\n    if (!len) {\n        return this.resolve([]);\n    }\n    var i = -1;\n    var promise = new this(INTERNAL);\n    while(++i < len){\n        resolver(iterable[i]);\n    }\n    return promise;\n    function resolver(value) {\n        self.resolve(value).then(function(response) {\n            if (!called) {\n                called = true;\n                handlers.resolve(promise, response);\n            }\n        }, function(error) {\n            if (!called) {\n                called = true;\n                handlers.reject(promise, error);\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/lie/lib/index.js\n");

/***/ })

};
;